{{- /*
Copyright VMware, Inc.
SPDX-License-Identifier: APACHE-2.0
*/}}

{{- if eq .Values.geoipupdate.kind "Deployment" -}}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
    app.kubernetes.io/component: geoipupdate
  {{- if or .Values.geoipupdate.deploymentAnnotations .Values.commonAnnotations }}
  {{- $annotations := include "common.tplvalues.merge" (dict "values" (list .Values.geoipupdate.deploymentAnnotations .Values.commonAnnotations) "context" .) }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" $annotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.geoipupdate.replicaCount }}
  {{- if .Values.geoipupdate.updateStrategy }}
  strategy: {{- toYaml .Values.geoipupdate.updateStrategy | nindent 4 }}
  {{- end }}
  {{- $podLabels := include "common.tplvalues.merge" (dict "values" (list .Values.geoipupdate.podLabels .Values.commonLabels) "context" .) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
      app.kubernetes.io/component: geoipupdate
  template:
    metadata:
      {{- if .Values.geoipupdate.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
        app.kubernetes.io/component: geoipupdate
    spec:
      serviceAccountName: {{ template "geoipupdate.serviceAccountName" . }}
      {{- include "geoipupdate.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.geoipupdate.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.geoipupdate.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.geoipupdate.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.geoipupdate.podAffinityPreset "component" "geoipupdate" "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.geoipupdate.podAntiAffinityPreset "component" "geoipupdate" "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.geoipupdate.nodeAffinityPreset.type "key" .Values.geoipupdate.nodeAffinityPreset.key "values" .Values.geoipupdate.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.geoipupdate.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.geoipupdate.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.geoipupdate.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.geoipupdate.priorityClassName }}
      priorityClassName: {{ .Values.geoipupdate.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.geoipupdate.schedulerName }}
      schedulerName: {{ .Values.geoipupdate.schedulerName | quote }}
      {{- end }}
      {{- if .Values.geoipupdate.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.geoipupdate.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.geoipupdate.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.geoipupdate.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.geoipupdate.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        {{- if .Values.geoipupdate.initContainers }}
          {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.initContainers "context" $) | nindent 8 }}
        {{- end }}
      containers:
        - name: geoipupdate
          image: {{ template "geoipupdate.image" . }}
          imagePullPolicy: {{ .Values.geoipupdate.image.pullPolicy }}
          {{- if .Values.geoipupdate.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.geoipupdate.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.geoipupdate.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.geoipupdate.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: GEOIPUPDATE_EDITION_IDS
              value: {{ .Values.geoipupdate.config.editionsIds | quote }}
            - name: GEOIPUPDATE_ACCOUNT_ID
            {{- if and .Values.geoipupdate.config.existingSecret .Values.geoipupdate.config.secretKeys.accoundId }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.geoipupdate.config.existingSecret | quote }}
                  key: {{ .Values.geoipupdate.config.secretKeys.accoundId | quote }}
            {{- else }}
              value: {{ .Values.geoipupdate.config.accoundId | quote }}
            {{- end }}
            - name: GEOIPUPDATE_LICENSE_KEY
            {{- if and .Values.geoipupdate.config.existingSecret .Values.geoipupdate.config.secretKeys.licenceKey }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.geoipupdate.config.existingSecret | quote }}
                  key: {{ .Values.geoipupdate.config.secretKeys.licenceKey | quote }}
            {{- else }}
              value: {{ .Values.geoipupdate.config.licenceKey | quote }}
            {{- end }}
            - name: GEOIPUPDATE_FREQUENCY
              value: {{ .Values.geoipupdate.config.frequency | quote }}
            {{- if .Values.geoipupdate.config.host }}
            - name: GEOIPUPDATE_HOST
              value: {{ .Values.geoipupdate.config.host | quote }}
            {{- end }}
            {{- if .Values.geoipupdate.config.proxy }}
            - name: GEOIPUPDATE_PROXY
              value: {{ .Values.geoipupdate.config.proxy | quote }}
            {{- end }}
            {{- if or .Values.geoipupdate.config.userPassword (and .Values.geoipupdate.config.existingSecret .Values.geoipupdate.config.secretKeys.userPassword) }}
            - name: GEOIPUPDATE_PROXY_USER_PASSWORD
            {{- if and .Values.geoipupdate.config.existingSecret .Values.geoipupdate.config.secretKeys.userPassword }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.geoipupdate.config.existingSecret | quote }}
                  key: {{ .Values.geoipupdate.config.secretKeys.userPassword | quote }}
            {{- else }}
              value: {{ .Values.geoipupdate.config.userPassword | quote }}
            {{- end }}
            {{- end }}
            {{- if .Values.geoipupdate.config.preserveFilesTimes }}
            - name: GEOIPUPDATE_PRESERVE_FILE_TIMES
              value: {{ .Values.geoipupdate.config.preserveFilesTimes | quote }}
            {{- end }}
            {{- if .Values.geoipupdate.config.verbose }}
            - name: GEOIPUPDATE_VERBOSE
              value: {{ .Values.geoipupdate.config.verbose | quote }}
            {{- end }}
            {{- if .Values.geoipupdate.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.geoipupdate.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.geoipupdate.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.geoipupdate.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.geoipupdate.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.geoipupdate.resources }}
          resources: {{- toYaml .Values.geoipupdate.resources | nindent 12 }}
          {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.geoipupdate.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.geoipupdate.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.geoipupdate.livenessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - /usr/bin/healthcheck.sh
          {{- end }}
          {{- if .Values.geoipupdate.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.geoipupdate.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.geoipupdate.readinessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - /usr/bin/healthcheck.sh
          {{- end }}
          {{- if .Values.geoipupdate.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.geoipupdate.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.geoipupdate.startupProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - /usr/bin/healthcheck.sh
          {{- end }}
          {{- end }}
          {{- if .Values.geoipupdate.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: geoipupdate-data-0
              mountPath: {{ .Values.persistence.mountPath }}
              {{- if .Values.persistence.subPath }}
              subPath: {{ .Values.persistence.subPath }}
              {{- end }}
          {{- if .Values.geoipupdate.extraVolumeMounts }}
          {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
        {{- if .Values.geoipupdate.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.geoipupdate.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: geoipupdate-data-0
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "common.names.fullname" .) .Values.persistence.existingClaim }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if .Values.geoipupdate.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.geoipupdate.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}